<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.coypu.data.disasters</groupId>
  <artifactId>disasters</artifactId>
  <version>0.20240214.0051</version>

  <parent>
    <groupId>org.aksw.data.config</groupId>
    <artifactId>aksw-data-deployment</artifactId>
    <version>0.0.8</version>
    <relativePath></relativePath>
  </parent>

  <packaging>pom</packaging>

  <name>Disaster Events RDF Export</name>
  <description>An export of disaster events from Global Disaster Alert and Coordination System (GDACS, https://www.gdacs.org/) and Reliefweb (https://reliefweb.int/). APIs from https://www.gdacs.org/xml/rss.xm and https://api.reliefweb.int/v1/disasters.</description>

  <licenses>
    <license>
      <name>MIT</name>
      <url>https://opensource.org/license/mit/</url>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>Nils Steinert</name>
      <organization>Implisense</organization>
      <organizationUrl>https://implisense.com</organizationUrl>
    </developer>
  </developers>

  <properties>
    <!-- Relative folder where to unpack the code bundle -->
    <localUnpackRelDir>temp-resources</localUnpackRelDir>

    <!-- Relative path within the code bundle where to do the work -->
    <codeRelDir>.</codeRelDir>

    <!-- Absolute path where to add the localUnpackRelDir directory (the directory itself) -->
    <containerBaseAbsDir>/maven</containerBaseAbsDir>

    <!-- Absolute work directory within the docker container -->
    <containerWorkAbsDir>${containerBaseAbsDir}/${localUnpackRelDir}/${codeRelDir}</containerWorkAbsDir>

    <!-- Description of the output generated by this build -->
    <output.filetype>nt.bz2</output.filetype>
    <output.filename>disasters.${output.filetype}</output.filename>
    <output.directory>${project.build.directory}</output.directory>

    <!-- Where to find the output in the container -->
    <container.output.path>${containerWorkAbsDir}/${output.filename}</container.output.path>

    <!-- Where to find the output on the host -->
    <output.path>${output.directory}/${output.filename}</output.path>

    <!-- Timeout after which docker execution will be terminated (in millis) -->
    <!-- 1800000 = 30 minutes -->
    <timeout>1800000</timeout>

    <!-- Show docker output during build -->
    <docker.showLogs>true</docker.showLogs>
  </properties>

  <build>
    <plugins>
      <!-- Unpack the source code of the data generator into a local temp directory -->
      <!-- which is not the usual target folder. The temp dir is a quirk because the -->
      <!-- docker-maven-plugin excludes the default 'target' build folder from the built image -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-code</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.coypu.disasters.code</groupId>
                  <artifactId>disasters-downloader</artifactId>
                  <version>0.0.2</version>
                  <overWrite>true</overWrite>
                  <outputDirectory>
                    ${localUnpackRelDir}/${codeRelDir}</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Clear the local temp directory on clean -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${localUnpackRelDir}</directory>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <!-- Declare that the output file of the data generator should become part of this artifact -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>${output.path}</file>
                  <type>${output.filetype}</type>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>generate-data</id>
      <activation>
        <property>
          <name>skipGenerateData</name>
          <value>!true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <configuration>
              <verbose>true</verbose>
              <images>
                <image>
                  <!-- <alias>coypu-datagen-disasters</alias> -->
                  <name>datagen-${project.artifactId}</name>
                  <build>
                    <workdir>${containerWorkAbsDir}</workdir>
                    <from>python:3.10-bookworm</from>
                    <maintainer>stadler@infai.org</maintainer>
                    <runCmds>
                      <run>apt-get update &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --assume-yes lbzip2</run>
                      <run>python -m venv venv &amp;&amp; . venv/bin/activate &amp;&amp; pip install -r requirements.txt</run>
                    </runCmds>
                    <assemblies>
                      <assembly>
                        <name>deps-release</name>
                        <descriptorRef>project</descriptorRef>
                        <targetDir>${containerBaseAbsDir}</targetDir>
                      </assembly>
                    </assemblies>
                    <!-- <assembly> <inline> <dependencySets> <dependencySet> <includes> <include> org.coypu.data.climatetrace:climatetrace-fluorinated-gases:0.2.0:zip</include> </includes> <outputDirectory>/tmp/</outputDirectory> <outputFileNameMapping>data.zip</outputFileNameMapping> </dependencySet> </dependencySets> </inline> </assembly> -->
                    <entryPoint>
                      <exec>
                        <arg>/bin/sh</arg>
                        <arg>run.sh</arg>
                      </exec>
                    </entryPoint>
                  </build>
                  <run>
                    <env>
                      <!-- Flag to indicate that we are running from a prebuilt image. -->
                      <!-- run.sh may pick it up to skip dependency resolution (as it happenend during build time) -->
                      <PREBUILT>true</PREBUILT>
                    </env>
                    <wait>
                      <time>${timeout}</time>
                      <exit>0</exit>
                    </wait>
                  </run>
                  <copy>
                    <entries>
                      <entry>
                        <containerPath>${container.output.path}</containerPath>
                        <hostDirectory>${output.directory}</hostDirectory>
                      </entry>
                    </entries>
                  </copy>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <!-- <id>build-container</id> <phase>generate-resources</phase> <goals> <goal>build</goal> </goals> -->
              </execution>
              <execution>
                <id>run-container</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>build</goal>
                  <goal>start</goal>
                  <goal>copy</goal>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Activating this profile sets the incremental version of this pom.xml to the current timestamp (minute granularity) -->
    <profile>
      <id>increment-version</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>version-timestamp-property</id>
                <goals>
                  <goal>timestamp-property</goal>
                </goals>
                <configuration>
                  <!-- format the timestamp such that the components fit into integers -->
                  <name>versionTimestamp</name>
                  <pattern>yyyyMMdd.HHmm</pattern>
                  <locale>en_US</locale>
                  <timeZone>UTC</timeZone>
                </configuration>
              </execution>
              <execution>
                <id>parse-version</id>
                <goals>
                  <goal>parse-version</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>versions-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>validate</phase>
                <goals>
                  <goal>set</goal>
                </goals>
                <configuration>
                  <!-- build helper can only parse integers. A timestamp of minute granularity such as -->
                  <!-- yyyyMMddHHmm is literally too *long* (pun intended) -->
                  <newVersion>${parsedVersion.majorVersion}.${versionTimestamp}-SNAPSHOT</newVersion>                  
                  <!-- <newVersion>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${versionTimestamp}-SNAPSHOT</newVersion> -->
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
